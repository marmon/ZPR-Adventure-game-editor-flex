<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         width="468" height="408" contentBackgroundAlpha="0.0" contentBackgroundColor="#FFFFFF">
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    
    <fx:Script>
        <![CDATA[
            import logic.Tools;
            
            import model.BoardViewModel;
            
            import mx.binding.utils.BindingUtils;
            import mx.core.UIComponent;
            import mx.events.FlexEvent;
            
            import view.BoardView;
            import view.GridUIComponent;
            
            public var boardView:BoardView;
            public var minimapView:BoardView;
            private var boardViewModel:BoardViewModel;
            
            [Bindable]
            public var defaultBlockLength:uint = 20;
            [Bindable]
            public var tool:String = Tools.SELECTION;
            [Bindable]
            private var minimapSize:uint = 100;
            
            public var currentColor:uint;
            
            public function initBoard():void
            {
                boardViewModel = new BoardViewModel();
                boardView = new BoardView(0,0, boardViewModel , defaultBlockLength);
                BindingUtils.bindProperty(boardView, 'tool', this, 'tool');
                boardView.addEventListener(MouseEvent.DOUBLE_CLICK, boardDoubleClick, true); // If there was no "true" then there were duplicated DOUBLE_CLICK events catched
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                boardView.addEventListener("roomChanged", roomChanged);
                vgroup.addElement( container );
                boardView.setCurrentRoomColor(currentColor);
                
                //minimap
                minimapBorder.removeAllElements();
                var size:uint = boardViewModel.board.length > boardViewModel.board[0].length ? boardViewModel.board.length : boardViewModel.board[0].length;
                size /= 3;
                minimapView = new BoardView(0,0, boardViewModel , minimapSize / size);
                var minimapContainer:UIComponent = new GridUIComponent(boardView);
                minimapContainer.addChild(minimapView);
                minimapBorder.addElement(minimapContainer);
                
            }
            
            public function setCurrentColor(color:uint):void
            {
                currentColor = color;
                boardView.setCurrentRoomColor(currentColor);
            }
            
             protected function boardDoubleClick(event:MouseEvent):void
            {
               //dispatchEvent(event);
                if(boardView.isRoomModeOn)
                {
                    // switch to big block mode
                    boardView.setIsRoomModeOn(false);
                    // TODO show minimap
                    // TODO turn off some tools
                    // TODO hide objects
                } else
                {
                    // switch to room mode
                    boardView.setIsRoomModeOn(true);
                    // TODO turn off extending arrows etc.
                    // TODO show object list
                    // TODO turn off some paint tools
                }
                vgroup.removeAllElements();
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                vgroup.addElement( container );
            } 
            
            private function updateViews():void
            {
                vgroup.removeAllElements();
                boardView = new BoardView(0,0, boardViewModel , defaultBlockLength);
                BindingUtils.bindProperty(boardView, 'tool', this, 'tool');
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                vgroup.addElement( container );
                boardView.addEventListener("roomChanged", roomChanged);
                boardView.setCurrentRoomColor(currentColor);
                
                updateMinimap();
            }
            private function updateMinimap():void
            {
                minimapBorder.removeAllElements();
                var size:uint = boardViewModel.board.length > boardViewModel.board[0].length ? boardViewModel.board.length : boardViewModel.board[0].length;
                size /= 3;
                minimapView = new BoardView(0,0, boardViewModel , minimapSize / size);
                var minimapContainer:UIComponent = new GridUIComponent(boardView);
                minimapContainer.addChild(minimapView);
                minimapBorder.addElement(minimapContainer);
            }
            
            protected function upButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertRow(BoardViewModel.FIRST);
                updateViews();
            }
            
            protected function leftButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertColumn(BoardViewModel.FIRST);
                updateViews();
            }
            
            protected function rightButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertColumn(BoardViewModel.LAST);
                updateViews();
            }
            
            protected function downButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertRow(BoardViewModel.LAST);
                updateViews();
            }
            
            protected function roomChanged(event:Event):void
            {
                updateMinimap();
            }
            
        ]]>
    </fx:Script>
    <s:BorderContainer id="border" x="0" y="24" width="100%" height="100%">
        <s:Scroller id="scroller" x="0" y="0" width="100%" height="100%">
            <s:VGroup id="vgroup" width="100%" height="100%">

            </s:VGroup>
        </s:Scroller>
    </s:BorderContainer>
    <s:BorderContainer id="minimapBorder" right="20" top="0" width="{minimapSize}" height="{minimapSize}">
        
    </s:BorderContainer>
  
    <s:HGroup x="0" y="0" width="200" height="22" paddingLeft="4">
        <s:Button id="left" x="0" click="leftButtonClicked(event)" icon="assets/left.png" verticalCenter="-193"/>
        <s:Button id="up" top="0" click="upButtonClicked(event)" horizontalCenter="155" icon="assets/up.png"/>
        <s:Button id="right" right="88" click="rightButtonClicked(event)" icon="assets/right.png"
                  verticalCenter="-193"/>
        <s:Button id="down" bottom="387" click="downButtonClicked(event)" horizontalCenter="-87"
                  icon="assets/down.png"/>
    </s:HGroup>
    <!--Debug-->
</s:Group>
