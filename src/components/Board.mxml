<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         width="400" height="408" contentBackgroundAlpha="0.0" contentBackgroundColor="#FFFFFF">
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    
    <fx:Script>
        <![CDATA[
            import logic.Tools;
            
            import model.BoardViewModel;
            
            import mx.binding.utils.BindingUtils;
            import mx.core.UIComponent;
            import mx.events.FlexEvent;
            
            import view.BoardView;
            import view.GridUIComponent;
            
            public var boardView:BoardView;
            
            private var boardViewModel:BoardViewModel;
            
            [Bindable]
            public var defaultBlockLength:uint = 20;
            [Bindable]
            public var tool:String = Tools.SELECTION;
            
            
            
            public function initBoard():void
            {
                boardViewModel = new BoardViewModel();
                boardView = new BoardView(0,0, boardViewModel , defaultBlockLength);
                BindingUtils.bindProperty(boardView, 'tool', this, 'tool');
                boardView.addEventListener(MouseEvent.DOUBLE_CLICK, boardDoubleClick, true); // If there was no "true" then there were duplicated DOUBLE_CLICK events catched
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                //border.addElement( container );
                vgroup.addElement( container );
                
            }
            
             protected function boardDoubleClick(event:MouseEvent):void
            {
               dispatchEvent(event);
            } 
            
            protected function upButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertRow(BoardViewModel.FIRST);
                
                vgroup.removeAllElements();
                boardView = new BoardView(0,0, boardViewModel , defaultBlockLength);
                BindingUtils.bindProperty(boardView, 'tool', this, 'tool');
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                vgroup.addElement( container );
                
            }
            
            protected function leftButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertColumn(BoardViewModel.FIRST);
                
                vgroup.removeAllElements();
                boardView = new BoardView(0,0, boardViewModel , defaultBlockLength);
                BindingUtils.bindProperty(boardView, 'tool', this, 'tool');
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                vgroup.addElement( container );
                
            }
            
            protected function rightButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertColumn(BoardViewModel.LAST);
                
                vgroup.removeAllElements();
                boardView = new BoardView(0,0, boardViewModel , defaultBlockLength);
                BindingUtils.bindProperty(boardView, 'tool', this, 'tool');
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                vgroup.addElement( container );

            }
            
            protected function downButtonClicked(event:MouseEvent):void
            {
                boardViewModel.insertRow(BoardViewModel.LAST);
                
                vgroup.removeAllElements();
                boardView = new BoardView(0,0, boardViewModel , defaultBlockLength);
                BindingUtils.bindProperty(boardView, 'tool', this, 'tool');
                var container:UIComponent = new GridUIComponent(boardView);
                container.addChild(boardView);
                vgroup.addElement( container );
                
            }
            
        ]]>
    </fx:Script>
    <s:BorderContainer id="border" x="77" y="29" width="245" height="251">
        <s:Scroller id="scroller" x="0" y="0" width="100%" height="100%">
            <s:VGroup id="vgroup" width="100%" height="100%">

            </s:VGroup>
        </s:Scroller>
    </s:BorderContainer>
    <s:Button id="left" x="0" click="leftButtonClicked(event)" icon="assets/left.png" verticalCenter="2"/>
    <s:Button id="up" top="0" click="upButtonClicked(event)" horizontalCenter="0" icon="assets/up.png"/>
    <s:Button id="right" right="0" click="rightButtonClicked(event)" icon="assets/right.png"
              verticalCenter="0"/>
    <s:Button id="down" bottom="0" click="downButtonClicked(event)" horizontalCenter="0"
              icon="assets/down.png"/>
    <!--Debug-->
    <s:TextArea id="textArea" x="30" y="308" height="71" text="asdasdsadsda"/>
</s:Group>
