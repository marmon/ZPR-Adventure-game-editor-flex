<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="444">
	
	<!-- Properties of the parent ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	
	
	<!-- Metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<fx:Metadata>
		[Event(name="roomColorChanged", type="events.RoomColorChanged")]
		[Event(name="objectUrlChanged", type="events.ObjectUrlChanged")]
		[Event(name="operationTypeChanged", type="events.OperationTypeChanged")]
	</fx:Metadata>
	
	<!-- Styles ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	
	
	<!-- Script ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import config.Config;
			
			import events.ObjectUrlChanged;
			import events.OperationTypeChanged;
			import events.RoomColorChanged;
			
			import logic.UndoRedo;
			import logic.commands.AddRoom;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import spark.events.IndexChangeEvent;
			
			import utils.stack.Stack;
			
			import valueObject.GameObject;
			import valueObject.Room;
			
			[Bindable]
			public var room:Room;
			[Bindable]
			public var color:uint;
			[Bindable]
			protected var rooms:ArrayCollection = new ArrayCollection();
			protected var objects:ArrayCollection = new ArrayCollection();
			private var remoteObj : RemoteObject = null;
			private var levelId:int;
			public function initApp(levelId:int):void
			{
				this.levelId = levelId;
				importObjects();
				remoteObj = new RemoteObject();
				remoteObj.endpoint = Config.getInstance().getEndpoint();
				remoteObj.destination = Config.getInstance().getDestination();
				remoteObj.readRooms.addEventListener("result", onReadRooms);
				remoteObj.addRooms.addEventListener("result", onAddRoom);
				refreshRoomList();
			}
			private function onReadRooms(re:ResultEvent) : void {
//				dispatchEvent(new Event(Event.CHANGE));
//				PopUpManager.removePopUp(this);
				/* status_txt.text = "fault: ";
				status_txt.text += fault.message;
				
				for( var d : String in fault.fault )
				{
				status_txt.text += fault.fault[d] + "\n";
				}
				(answer.capacity as Number)
				*/
				var roomsArray:Array = re.result as Array;
				rooms = new ArrayCollection();
				//for(var  room:String in roomsArray)
                for(var i:int = 0 ; i < roomsArray.length ; ++i)
				{
					var newRoom:Room = new Room();
					newRoom.name = (roomsArray[i].name) as String;
					newRoom.color = (roomsArray[i].color) as uint;
					newRoom.id = (roomsArray[i].id) as int;
					rooms.addItem(newRoom);
				}
				/*
				var answer : Object = re.result;
				
				selectedBackpackName.text = answer.name as String;
				selectedBackpackSize.text = (answer.capacity as Number).toString();
				
				var itemsArray : Array = answer.items as Array;
				
				itemsCollection_.source = itemsArray;
				*/
				//var answer : Object = re.result;
				//var itemsArray : Array = answer.items as Array;
				//rooms.source = re.result as Array;;
				
			}
			private function onAddRoom(re:ResultEvent)
			{
				
			}
			private function importObjects():void
			{
				if(objects.length != 0)
					return;
				var gObj:GameObject = new GameObject();
				gObj.name = "obj1";
				gObj.url = "images/herb.png";
				objects.addItem(gObj);
				var gObj2:GameObject = new GameObject();
				gObj2.name = "obj2";
				gObj2.url = "images/h.png";
				objects.addItem(gObj2);
			}
			private function addClick() : void {
//				if( backpackName.text.length == 0 ) {
//					Alert.show('give the backpack name');
//				}
//				var size_backpack : Number = parseFloat(backpackSize.text);
//				remoteObj.addBackpack(backpackName.text, size_backpack);
		//		var cmd:AddRoom = new AddRoom();
			//	cmd.name = 
			}
			public function refreshRoomList():void
			{
				remoteObj.readRooms(levelId);
				
			}
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
				/*
				
				*/
				var r:Room = new Room();
				r.name = roomName.text;
				r.color = roomColor.selectedColor;
				for each(var room:Room in rooms)
				{
					if((room as Room).color == roomColor.selectedColor)
					{
						Alert.show("Color must be unique!");
						return;
					}
					if((room as Room).name == roomName.text)
					{
						Alert.show("Name must be unique!");
						return;
					}
				}
				var cmd:AddRoom = new AddRoom();
				cmd.name = roomName.text;
				cmd.color = roomColor.selectedColor;
				cmd.levelId = levelId;
				cmd.roomCreator = this;
				UndoRedo.getInstance().execute(cmd);
				//rooms.addItem(r);
				
			}
			protected function objectList_changeHandles(event:IndexChangeEvent): void
			{

				list.selectedIndex = -1;
				var eventObject:ObjectUrlChanged = new ObjectUrlChanged("objectUrlChanged", (objectsList.selectedItem as GameObject).url);
				dispatchEvent(eventObject);
				var operationEvent:OperationTypeChanged = new OperationTypeChanged("operationTypeChanged", 1);
				dispatchEvent(operationEvent);
				
			}
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				objectsList.selectedIndex = -1;
				room = (list.selectedItem as Room);
				color = room.color;
				
				var eventObject:RoomColorChanged = new RoomColorChanged("roomColorChanged", room.color); 
				dispatchEvent(eventObject);
				//var operationEvent:OperationTypeChanged = new OperationTypeChanged("operationTypeChanged", 0);
				//dispatchEvent(operationEvent); change="list_changeHandler(event)"
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Label text="Rooms"/>
	<s:List id="list" width="100%"  dataProvider="{rooms}" change="list_changeHandler(event)" labelField="name">
	</s:List>
	<s:Group width="100%" height="194">
		<s:layout>
			<s:HorizontalLayout/>

		</s:layout>
			<s:Label text="Name:"/>
			<s:TextInput id="roomName"/>
			<s:Label text="Color:"/>
			<mx:ColorPicker id="roomColor"/>

			<s:Button id="submitButton" label="Add room" click="submitButton_clickHandler(event)" enabled="{roomName.text}"/>
        <s:Button id="deleteRoom" label="Delete" color="#FB0808" fontWeight="bold" enabled="{list.selectedItem}"/>
	</s:Group>
	<s:Label text="Objects"/>
	<s:List id="objectsList" width="100%" change="objectList_changeHandles(event)" dataProvider="{objects}" labelField="name">
		
	</s:List>
	<s:Form width="100%" height="65">
		<s:FormItem label="Room name:">
		</s:FormItem>
		<s:FormItem label="Color:">
		</s:FormItem>
		
		<s:FormItem>
		</s:FormItem>
	</s:Form>
	<s:Spacer width="100%" height="50"/>
	<s:Group width="100%" height="194">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		
		<!-- Binding of ColorPicker below somehow do not work. Probably I am binding it to wrong property -->
		<mx:ColorPicker id="roomColor2" x="12" y="14" selectedColor="{(list.selectedItem as Room).color}"/>
		
		<!--Example of binding. Text and its color are bound to selected room from the list-->
		<s:TextInput id="roomName2" x="10" y="49" text="{list.selectedItem.name}" color="{(list.selectedItem as Room).color}"/>
	</s:Group>
	
	
</s:Group>
