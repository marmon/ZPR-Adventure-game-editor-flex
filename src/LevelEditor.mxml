<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:components="components.*"
			   width="1019" height="988" minWidth="955" minHeight="600"
			  >
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import config.Config;
			
			import events.ObjectUrlChanged;
			import events.OperationTypeChanged;
			import events.RoomColorChanged;
			
			import logic.UndoRedo;
			
			import model.BoardViewModel;
			
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.URLUtil;
			
			import valueObject.Room;
			
			import view.BoardView;
			[Bindable]
			private var backpackArray_ : Array = null;
			//private var boardView:BoardView;
			private var remoteObj:RemoteObject = null;
			private var boardView:BoardView;
			private var selectedLevel:int;
			public function init(selectedLevel:int):void
			{
				this.selectedLevel = selectedLevel;
			//	boardView = new BoardView(0,0,new BoardViewModel()); // BoardViewModel constructor has reasonable default
			//	stage.addChild(boardView);
            //    boardView.addEventListener(MouseEvent.DOUBLE_CLICK,boardDoubleClicked);
			//	boardView.setOperationType(0);
				//roomCreator.initApp();
                board.initBoard();
               // stage.addChild(board.boardView);
                board.addEventListener(MouseEvent.DOUBLE_CLICK,boardDoubleClicked);
				var conf : Config = Config.getInstance();

				var swf_url :String = FlexGlobals.topLevelApplication.loaderInfo.url;
				if (URLUtil.isHttpURL(swf_url) ) {
					conf.setURL( URLUtil.getProtocol(swf_url), URLUtil.getServerNameWithPort(swf_url) );
				}
				
				remoteObj = new RemoteObject();
				remoteObj.endpoint = conf.getEndpoint();
				remoteObj.destination = conf.getDestination();
				remoteObj.echo.addEventListener("result",onResultEcho);
				remoteObj.readRooms.addEventListener("result", onReadRooms);
//				remoteObj.delBackpack.addEventListener("result", onDelBackpack);
//				remoteObj.readBackpackDetails.addEventListener("result",onReadBackpackDetails);
//				remoteObj.delBackpackItem.addEventListener("result",onDelBackpackItem);
				remoteObj.addEventListener("fault", onFault);
				
				var param:String = "Hello ";
				remoteObj.echo(param);
			}
			private function refreshClick() : void {
				sendRefresh(null);
			}
            protected function boardDoubleClicked(event:MouseEvent):void
            {
                textArea.text += "\n board double clicked\n";
                // TODO: we could initilize change to room view here if it is gonna be done in other compontent
                // if not, then this handler is rather useless.
            }
			private function onReadRooms(re:ResultEvent) : void {
				textArea.text = "Pierwszy element: nazwa";
				
				backpackArray_ = re.result as Array;
				var ans:Object = backpackArray_[2];
				textArea.text += ans.name as String;
				textArea.text += (ans.color as uint).toString();
//				setSelectedBackpack( -1 );
			}
			private function onFault(fault:FaultEvent) : void {
				textArea.text = "fault: ";
				textArea.text += fault.message;
				
				for( var d : String in fault.fault )
				{
					textArea.text += fault.fault[d] + "\n";
				}
				
			}
			private function onResultEcho(re:ResultEvent) : void {
				textArea.text = "echo received";
				sendRefresh(null);
			}
			private function sendRefresh(event:Event) : void {
				remoteObj.readRooms();
			}
			protected function roomCreator_roomColorChangedHandler(event:RoomColorChanged):void
			{
				board.setCurrentColor(event.color);
			}
	//		protected function roomCreator_roomUrlChangedHandler(event:ObjectUrlChanged):void
	//		{
	//			boardView.setUrl(event.url);
	//		}
			
	//		protected function mapToJSON_handler(event:MouseEvent):void
	//		{
    //            textArea.text = com.adobe.serialization.json.JSON.encode(boardView.boardViewModel);
	//		}
            
            protected function undo(event:MouseEvent):void
            {
                UndoRedo.getInstance().undo();
                
            }
            
            protected function redo(event:MouseEvent):void
            {
                UndoRedo.getInstance().redo();
                
            }
			private function bpListChange() : void {
		//		setSelectedBackpack( backpackArray_[listBackpack.selectedIndex].id );
			}
        ]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>

	<!--<components:RoomCreator id="roomCreator" x="609" y="10" roomColorChanged="roomCreator_roomColorChangedHandler(event)" objectUrlChanged="roomCreator_roomUrlChangedHandler(event)"/>-->
    <components:RoomCreator id="roomCreator" x="609" y="10" roomColorChanged="roomCreator_roomColorChangedHandler(event)"/>
	<!--<s:Button x="396" y="742" label="Map to JSON" click="mapToJSON_handler(event)"/>-->
	<s:TextArea id="textArea" x="10" y="547" width="378" height="220" text="{toolbar.tool}"/>
    <s:Button x="32" y="504" label="Undo" click="undo(event)"/>
    <s:Button x="140" y="504" label="Redo" click="redo(event)"/>
    <components:Toolbar id="toolbar" x="32" y="475">
    </components:Toolbar>
	<mx:List id="listBackpack" x="800" y="800" width="150" height="500" dataProvider="{backpackArray_}" change="bpListChange()" />
	<mx:Button id="refreshBackpackList" x="800" y="700" label="refresh" click = "refreshClick()" />
	<components:Board id="board" x="10" y="10" width="572" height="444" defaultBlockLength="30"
                      tool="{toolbar.tool}"/>
</s:Group>

